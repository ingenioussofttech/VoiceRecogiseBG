

 // Generated by CoffeeScript 1.6.3
(function() {
  var VoiceRecognise, cordova, exec;

  cordova = require("cordova");

  exec = require("cordova/exec");

  VoiceRecognise = (function() {
    var genericHandleError, trigger;

    function VoiceRecognise() {}

    trigger = function(evt, args) {
      return document.dispatchEvent(new CustomEvent(evt, {
        detail: args
      }));
    };

    genericHandleError = function(args) {
      return trigger("VoiceRecogniseError", args);
    };

    VoiceRecognise.prototype.startAudioSession = function() {
      var success;
      success = function(args) {
        return trigger("startAudioSession", args);
      };
      return exec(success, genericHandleError, "VoiceRecognise", "startAudioSession", []);
    };

    VoiceRecognise.prototype.setMatchWord = function(languageName, languageCSV) {
      var success;
                   
      success = function(args) {
                    
        return trigger("setMatchWord", args);
      };
      return exec(success, genericHandleError, "VoiceRecognise", "setMatchWord", [languageName, languageCSV.toUpperCase()]);
    };
                    
    
    VoiceRecognise.prototype.generateLanguageModel = function(languageName, languageCSV) {
                    var success;
                    
                    success = function(args) {
                    return trigger("generateLanguageModel", args);
                    };
                    return exec(success, genericHandleError, "VoiceRecognise", "generateLanguageModel", [languageName, languageCSV.toUpperCase()]);
   };

    VoiceRecognise.prototype.stopListening = function() {
      var success;
      success = function(args) {
        return trigger("stopListening", args);
      };
      return exec(success, genericHandleError, "VoiceRecognise", "stopListening", []);
    };

    VoiceRecognise.prototype.resumeListening = function(options) {
      var success;
      success = function(args) {
        return trigger("resumeListening", args);
      };
      return exec(success, genericHandleError, "VoiceRecognise", "resumeListening", []);
    };

    VoiceRecognise.prototype.suspendRecognition = function() {
      var success;
      success = function(args) {
        return trigger("suspendRecognition", args);
      };
      return exec(success, genericHandleError, "VoiceRecognise", "suspendRecognition", []);
    };

    VoiceRecognise.prototype.resumeRecognition = function() {
      var success;
      success = function(args) {
        return trigger("resumeRecognition", args);
      };
      return exec(success, genericHandleError, "VoiceRecognise", "resumeRecognition", []);
    };

    VoiceRecognise.prototype.startListeningWithLanguageModelAtPath = function(languagemodel, dictionary, options) {
      var success;
      if (options == null) {
        options = null;
      }
      success = function(args) {
        return trigger("startListeningWithLanguageModelAtPath", args);
      };
      return exec(success, genericHandleError, "VoiceRecognise", "startListeningWithLanguageModelAtPath", [languagemodel, dictionary, options]);
    };

    VoiceRecognise.prototype.changeLanguageModelToFile = function(languagemodel, dictionary, options) {
      var success;
      if (options == null) {
        options = null;
      }
      success = function(args) {
        return trigger("changeLanguageModelToFile", args);
      };
      return exec(success, genericHandleError, "VoiceRecognise", "changeLanguageModelToFile", [languagemodel, dictionary, options]);
    };

    VoiceRecognise.prototype.say = function(phrase) {
      var success;
      success = function(args) {
        return trigger("say", args);
      };
      return exec(success, genericHandleError, "VoiceRecognise", "say", [phrase]);
    };

    VoiceRecognise.prototype.events = {
      startedListening: function() {
        return trigger("startedListening");
      },
      stoppedListening: function() {
        return trigger("stoppedListening");
      },
      detectedSpeech: function() {
        return trigger("detectedSpeech");
      },
      finishedDetectingSpeech: function() {
        return trigger("finishedDetectingSpeech");
      },
      suspendedRecognition: function() {
        return trigger("suspendedRecognition");
      },
      resumedRecognition: function() {
        return trigger("resumedRecognition");
      },
      startedCalibration: function() {
        return trigger("startedCalibration");
      },
      finishedCalibration: function() {
        return trigger("finishedCalibration");
      },
      continuousSetupDidFail: function() {
        return trigger("continuousSetupDidFail");
      },
      testRecognitionCompleted: function() {
        return trigger("testRecognitionCompleted");
      },
      receivedHypothesis: function(hypothesis, recognitionScore, utteranceID) {
        return trigger("receivedHypothesis", {
          hypothesis: hypothesis,
          recognitionScore: recognitionScore,
          utteranceID: utteranceID
        });
      },
      changedLanguageModelToFile: function(modelPath, dictionaryPath) {
        return trigger("changedLanguageModelToFile", {
          modelPath: modelPath,
          dictionaryPath: dictionaryPath
        });
      },
      startedSpeaking: function() {
        return trigger("startedSpeaking");
      },
      finishedSpeaking: function() {
        return trigger("finishedSpeaking");
      },
      audioSessionInterruptionDidBegin: function() {
        return trigger("audioSessionInterruptionDidBegin");
      },
      audioSessionInterruptionDidEnd: function() {
        return trigger("audioSessionInterruptionDidEnd");
      },
      audioInputDidBecomeUnavailable: function() {
        return trigger("audioInputDidBecomeUnavailable");
      },
      audioInputDidBecomeAvailable: function() {
        return trigger("audioInputDidBecomeAvailable");
      },
      audioRouteDidChangeToRoute: function() {
        return trigger("audioRouteDidChangeToRoute");
      }
    };

    return VoiceRecognise;

  })();

  VoiceRecognise = new VoiceRecognise();

  module.exports = VoiceRecognise;

}).call(this);


